#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "^$1$" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

brew_install_or_upgrade 'gpg'
brew_install_or_upgrade 'zsh'
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'postgres'
brew_launchctl_restart 'postgresql'
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'redis'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'qt'
brew_install_or_upgrade 'hub'
brew_install_or_upgrade 'node'

brew_install_or_upgrade 'ruby-build'

brew_install_or_upgrade 'openssl'
brew unlink openssl && brew link openssl --force
brew_install_or_upgrade 'libyaml'

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

is_rvm_installed() {
  rvm -v | grep -q "rvm.io"
}

if ! is_rvm_installed; then
  fancy_echo "Securely installing RVM ..."
  pushd $(mktemp -d -t rvm)
  gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
  \curl -O https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer
  \curl -O https://raw.githubusercontent.com/rvm/rvm/master/binscripts/rvm-installer.asc
  gpg --verify rvm-installer.asc && bash rvm-installer stable
  popd
else
  fancy_echo "... skipping RVM, already installed"
fi

source $HOME/.rvm/scripts/rvm

if ! rvm list | grep -Fq "$ruby_version"; then
  fancy_echo "Installing ruby ${ruby_version} ..."
  rvm install "$ruby_version"
else
  fancy_echo "... skipping ruby ${ruby_version}, already installed"
fi

fancy_echo "Setting default ruby to ${ruby_version} ..."
  rvm --default use "${ruby_version}"

fancy_echo "Updating system gems ..."
  gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

brew_install_or_upgrade 'heroku-toolbelt'

if ! command -v rcup >/dev/null; then
  brew_tap 'thoughtbot/formulae'
  brew_install_or_upgrade 'rcm'
fi

fancy_echo "Installing wget ..."
  brew_install_or_upgrade wget

if ! brew list | grep -q "brew cask"; then
  brew tap caskroom/cask
fi

brew_install_or_upgrade 'caskroom/cask/brew-cask'
brew cleanup && brew cask cleanup

# run this once, the command is slow
brew_cask_list() {
  brew cask list 2> /dev/null || true
}

CASKS=$(brew_cask_list)

is_brew_cask_installed() {
  echo ${CASKS} | grep -q "\b$1"
}

brew_cask_install() {
  if is_brew_cask_installed $1; then
    fancy_echo "... skipping cask $1, already installed"
  else
    brew cask install $1 2> /dev/null || true
  fi

  true
}

brew_cask_link() {
  if brew cask $1 status | grep -q 'happily linked'; then
    less_fancy_echo "... skip linking $1, already linked"
  else
    brew cask $1 link
  fi
}

fancy_echo "Installing Alfred ..."
  brew_cask_install alfred

fancy_echo "Installing Caffeine ..."
  brew_cask_install caffeine

fancy_echo "Installing Day-O ..."
  brew_cask_install day-o

fancy_echo "Installing f.lux ..."
  brew_cask_install flux

fancy_echo "Installing Flycut ..."
  brew_cask_install flycut

fancy_echo "Installing Google Chrome ..."
  brew_cask_install google-chrome

fancy_echo "Installing Google Drive ..."
  brew_cask_install google-drive

if [ ! -d /Applications/ShiftIt.app ]; then
  fancy_echo "Installing ShiftIt (onsi fork) window manager ..."
  wget https://raw.github.com/onsi/ShiftIt/master/ShiftIt.zip
  unzip -q ShiftIt.zip
  rm ShiftIt.zip
  mv ShiftIt.app /Applications/
else
  fancy_echo "... skipping onsi ShiftIt, already installed"
fi

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi
